#!/bin/bash

working_dir="$HOME/.scfg"
map_file="$working_dir/map"
backup_dir="$working_dir/backup"
me=`basename "$0"`


# helpers

function cd_working_dir {
  trap 'popd > /dev/null' EXIT
  cd $working_dir
  pushd .
}

function map_config {
  config_file=$1
  config_name=`basename $config_file`
  config_file_path=`realpath $config_file`
  
  echo "$config_name=$config_file_path" >> $map_file
}

function is_config_not_added {
  config_file=$1
  config_name=`basename $config_file`
  [ `cat $map_file | awk -F\= '{print $1}' | grep $config_name | wc -l` -eq "0" ]
}

function backup {
  config_file=$1

  if ! [ -L "$config_file" ]
  then
	cp $config_file $backup_dir
  fi
}

# interface

function scfg_help {
  echo "Simple git based shared configuration." > $(tty)
  echo > $(tty)
  echo "Usage:" > $(tty)
  echo "  init <git_remote>      set up new git repository for all configs" > $(tty)
  echo "  add                    add file to repository" > $(tty)
  echo "  sync                   synchronize configuration (overrides your current config files)" > $(tty)

}

function scfg_init {  
  git_remote=$1
  if [ -z "$git_remote" ]
  then
    echo "Usage: $me init <git_remote>" > $(tty)
	exit
  fi

  mkdir -p $working_dir
  mkdir -p $backup_dir
  cd_working_dir
  echo "/backup" > .gitignore
  echo "# Configuration mapping" > $map_file
  
  git init
  git add .
  git commit -m "initialize shared configuration"
  git remote add origin $git_remote
  git push -u origin master
}

function scfg_add {
  config_file=$1
  
    
  if [ -z "$config_file" ]
  then
    echo "Usage: $me add <config_file>" > $(tty)
	exit
  fi
  
  config_name=`basename $config_file`
 
  if is_config_not_added $config_file
  then
    backup $config_file
    map_config $config_file
    cp $config_file $working_dir
    rm $config_file
    ln -s $working_dir/$config_name $config_file
	commit_message="add $config_name"
  else
	commit_message="update $config_name"
  fi
  
 
  cd_working_dir
  git add $config_name
  git add $map_file
  git commit -m "$commit_message"
  git push origin master
}

function scfg_sync {
  cd_working_dir
  
  git pull
  
  IFS="="
  while read -r config_name config_path
  do
    if ! [[ "$config_name" =~ ^#.*$ || -L "$config_path" ]]
	then 
      config_dir=$(dirname "$config_path")
	  mkdir -p $config_dir
	  backup $config_path
	  rm -f $config_path
	  ln -s `realpath $config_name` $config_path
	fi
  done < $map_file
}

set -e
eval scfg_$1 "${@:2}" > /dev/null
